{
  "version": 3,
  "sources": ["../../react-bootstrap/esm/DropdownButton.js"],
  "sourcesContent": ["import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Dropdown from './Dropdown';\r\nimport DropdownToggle from './DropdownToggle';\r\nimport DropdownMenu from './DropdownMenu';\r\nimport { alignPropType } from './types';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\r\nconst propTypes = {\r\n  /**\r\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\r\n   * @type {string}\r\n   */\r\n  id: PropTypes.string,\r\n  /** An `href` passed to the Toggle component */\r\n  href: PropTypes.string,\r\n  /** An `onClick` handler passed to the Toggle component */\r\n  onClick: PropTypes.func,\r\n  /** The content of the non-toggle Button.  */\r\n  title: PropTypes.node.isRequired,\r\n  /** Disables both Buttons  */\r\n  disabled: PropTypes.bool,\r\n  /**\r\n   * Aligns the dropdown menu.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   *\r\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\r\n   */\r\n  align: alignPropType,\r\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\r\n  menuRole: PropTypes.string,\r\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\r\n  renderMenuOnMount: PropTypes.bool,\r\n  /**\r\n   *  Which event when fired outside the component will cause it to be closed.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   */\r\n  rootCloseEvent: PropTypes.string,\r\n  /**\r\n   * Menu color variant.\r\n   *\r\n   * Omitting this will use the default light color.\r\n   */\r\n  menuVariant: PropTypes.oneOf(['dark']),\r\n  /**\r\n   * Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer to\r\n   * Popper.js's flip [docs](https://popper.js.org/docs/v2/modifiers/flip/).\r\n   *\r\n   */\r\n  flip: PropTypes.bool,\r\n  /** @ignore */\r\n  bsPrefix: PropTypes.string,\r\n  /** @ignore */\r\n  variant: PropTypes.string,\r\n  /** @ignore */\r\n  size: PropTypes.string\r\n};\r\n\r\n/**\r\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\r\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of\r\n * [`Dropdown`'s props](#dropdown-props).\r\n *\r\n * _All unknown props are passed through to the `Dropdown` component._ Only\r\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\r\n * along with menu-related props are passed to the `Dropdown.Menu`\r\n */\r\nconst DropdownButton = /*#__PURE__*/React.forwardRef(({\r\n  title,\r\n  children,\r\n  bsPrefix,\r\n  rootCloseEvent,\r\n  variant,\r\n  size,\r\n  menuRole,\r\n  renderMenuOnMount,\r\n  disabled,\r\n  href,\r\n  id,\r\n  menuVariant,\r\n  flip,\r\n  ...props\r\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\r\n  ref: ref,\r\n  ...props,\r\n  children: [/*#__PURE__*/_jsx(DropdownToggle, {\r\n    id: id,\r\n    href: href,\r\n    size: size,\r\n    variant: variant,\r\n    disabled: disabled,\r\n    childBsPrefix: bsPrefix,\r\n    children: title\r\n  }), /*#__PURE__*/_jsx(DropdownMenu, {\r\n    role: menuRole,\r\n    renderOnMount: renderMenuOnMount,\r\n    rootCloseEvent: rootCloseEvent,\r\n    variant: menuVariant,\r\n    flip: flip,\r\n    children: children\r\n  })]\r\n}));\r\nDropdownButton.displayName = 'DropdownButton';\r\nDropdownButton.propTypes = propTypes;\r\nexport default DropdownButton;"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,YAAuB;AACvB,wBAAsB;AAKtB,yBAA4B;AAC5B,IAAAA,sBAA8B;AAC9B,IAAM,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,EAKhB,IAAI,kBAAAC,QAAU;AAAA;AAAA,EAEd,MAAM,kBAAAA,QAAU;AAAA;AAAA,EAEhB,SAAS,kBAAAA,QAAU;AAAA;AAAA,EAEnB,OAAO,kBAAAA,QAAU,KAAK;AAAA;AAAA,EAEtB,UAAU,kBAAAA,QAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQpB,OAAO;AAAA;AAAA,EAEP,UAAU,kBAAAA,QAAU;AAAA;AAAA,EAEpB,mBAAmB,kBAAAA,QAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM7B,gBAAgB,kBAAAA,QAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM1B,aAAa,kBAAAA,QAAU,MAAM,CAAC,MAAM,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMrC,MAAM,kBAAAA,QAAU;AAAA;AAAA,EAEhB,UAAU,kBAAAA,QAAU;AAAA;AAAA,EAEpB,SAAS,kBAAAA,QAAU;AAAA;AAAA,EAEnB,MAAM,kBAAAA,QAAU;AAClB;AAWA,IAAM,iBAAoC,iBAAW,CAAC;AAAA,EACpD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,GAAG;AACL,GAAG,YAAqB,oBAAAC,MAAM,kBAAU;AAAA,EACtC;AAAA,EACA,GAAG;AAAA,EACH,UAAU,KAAc,mBAAAC,KAAK,wBAAgB;AAAA,IAC3C;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,eAAe;AAAA,IACf,UAAU;AAAA,EACZ,CAAC,OAAgB,mBAAAA,KAAK,sBAAc;AAAA,IAClC,MAAM;AAAA,IACN,eAAe;AAAA,IACf;AAAA,IACA,SAAS;AAAA,IACT;AAAA,IACA;AAAA,EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACF,eAAe,cAAc;AAC7B,eAAe,YAAY;AAC3B,IAAO,yBAAQ;",
  "names": ["import_jsx_runtime", "PropTypes", "_jsxs", "_jsx"]
}
